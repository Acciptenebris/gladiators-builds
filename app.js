// ========== –ì–ï–†–û–ò –î–õ–Ø –í–´–ü–ê–î–ê–Æ–©–ï–ì–û –°–ü–ò–°–ö–ê ==========
const HEROES_LIST = [
    "DROW RANGER", "NYX", "TIMBERSAW", "UNDDYING", "PA", "PUGNA", "MIRANA", "LC", "PANGO", "LIFESTEALER", "HUSKAR", "MAGNUS", "ZEUS", "JUGGER", "CK", "NECR", "TINY", "YAMASHITA",
    "VOID", "AA", "DARK WILLOW", "MUERTA", "HOODWINK", "VIPER", "TINKER", "DOOM", "GRIMSTROKE", "AXE", "QOP", "MARCI", "WINDRANDGER", "TREANT", "LICH", "LYCAN", "OMNIK", "URSA",
    "SF", "SKY", "ABADDON", "RAZOR", "SPECTRE", "SNIPER", "EMBER SPIRIT", "VOID SPIRIT", "RIKI", "LUNA", "OGRE MAGI", "CM", "PUDGE", "ASH", "LINA", "KUNKKA", "DAZZLE", "AWAKENED",
    "WASTELAND GUARD", "TA", "RINGMASTER", "MK", "ES", "LION", "GUITARIST", "KEZ", "WITCH DOCTOR", "FLAMEBORN", "TROLL", "ALCHEMIST", "CLINKZ", "LESHRAC", "PL", "BRIST", "SILENCER",
    "BROOD MOTHER",
];

// ========== –î–ê–ù–ù–´–ï –°–¢–ò–õ–ï–ô ==========
const PLAYSTYLES_DATA = [
    {id: "guards", name: "–°—Ç—Ä–∞–∂–∏", description: "–ì–µ–π—Å–∫–∏–µ —à–∞—Ä—ã"},
    {id: "crits", name: "–ö—Ä–∏—Ç—ã", description: "–°—Ä–∞–Ω—ã–µ –ø—Ä–æ–∫–∏"},
    {id: "dodge", name: "–£–≤–æ—Ä–æ—Ç—ã", description: "–í—Å–µ–≥–¥–∞ –∫–∞—á–∞–π –º–µ–Ω—è"},
    {id: "poison", name: "–Ø–¥—ã", description: "–í –Ω–∞—á–∞–ª–µ —Ç–∞—â—É, –≤ –∫–æ–Ω—Ü–µ –ì–•"},
    {id: "shields", name: "–©–∏—Ç—ã", description: "–ë–µ–∑ –ø—Ä–æ–∫–æ–≤ –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω"},
    {id: "healing", name: "–õ–µ—á–µ–Ω–∏–µ", description: "–°–∏–ª—å–Ω–µ–µ –∫–∞–ª–µ—á—É —á–µ–º –ª–µ—á—É"},
    {id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", description: "–Ø –∏–º–±–∞"},
    {id: "vulnerability", name: "–£—è–∑–≤–∏–º–æ—Å—Ç—å", description: "–§–∞–π—Ç –¥–≤–µ —Å–µ–∫—É–Ω–¥—ã"},
    {id: "rage", name: "–Ø—Ä–æ—Å—Ç—å", description: "–ù–µ —è—Å–Ω–æ –∑–∞—á–µ–º —è –Ω—É–∂–µ–Ω"},
    {id: "freeze", name: "–ó–∞–º–æ—Ä–æ–∑–∫–∞", description: "–£–¥–∞—á–∏ –∫–∞—Å—Ç–∞–Ω—É—Ç—å —É–ª—å—Ç—É"},
    {id: "chaos", name: "–•–∞–æ—Å", description: "–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è —Ç–µ–º–∞ –≤–æ–æ–±—â–µ"},
    {id: "ultimate", name: "–£–ª—å—Ç–∞", description: "–û–ø—è—Ç—å –≥–∏—Ç–∞—Ä–∏—Å—Ç –≤ –±–∞–Ω–µ"},
    {id: "attack", name: "–ê—Ç–∞–∫–∞", description: "–ú–æ—è –±–∏—Ç—å"}
];

// ========== –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï ==========
const STORAGE_KEY = "buildsDatabase";
let builds = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];

// ========== –°–û–°–¢–û–Ø–ù–ò–ï ==========
let selectedDisabledStyles = []; // 5 —Å—Ç–∏–ª–µ–π –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∏–≥—Ä–µ
let editingBuildIndex = null;

// ========== UI –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========
document.addEventListener("DOMContentLoaded", () => {
    renderDisabledStylesPicker();
    renderBuildsList();
    setupEventListeners();
});

// ========== –ü–û–ò–°–ö –ë–ò–õ–î–û–í ==========
function searchBuilds(disabledStyles) {
    const enabledStyles = PLAYSTYLES_DATA.map(x => x.id).filter(id => !disabledStyles.includes(id));
    return builds.filter(build => {
        if (!build.mustHave.every(s => enabledStyles.includes(s))) return false;
        if (build.mustNotHave.some(s => enabledStyles.includes(s))) return false;
        return true;
    });
}

// ========== –û–¢–†–ò–°–û–í–ö–ê –í–´–ë–û–†–ê –°–¢–ò–õ–ï–ô –î–õ–Ø –ü–û–ò–°–ö–ê ==========
function renderDisabledStylesPicker() {
    const grid = document.getElementById('playstyles-grid');
    grid.innerHTML = '';
    PLAYSTYLES_DATA.forEach(ps => {
        const btn = document.createElement('button');
        btn.className = 'playstyle-btn';
        btn.dataset.id = ps.id;
        btn.innerHTML = `<div>${ps.name}</div><div style="font-size:0.8em;color:#ccc">${ps.description}</div>`;
        if (selectedDisabledStyles.includes(ps.id)) btn.classList.add('selected');
        if (selectedDisabledStyles.length >= 5 && !selectedDisabledStyles.includes(ps.id))
            btn.classList.add('disabled');

        btn.onclick = () => {
            toggleDisabledStyle(ps.id);
        };
        grid.appendChild(btn);
    });
    document.getElementById('selection-count').textContent = selectedDisabledStyles.length;
}

function toggleDisabledStyle(id) {
    const i = selectedDisabledStyles.indexOf(id);
    if (i === -1 && selectedDisabledStyles.length < 5) selectedDisabledStyles.push(id);
    else if (i !== -1) selectedDisabledStyles.splice(i, 1);
    renderDisabledStylesPicker();
    renderSearchResults();
}

// ========== –°–õ–û–¢–´ –í–´–ë–û–†–ê ==========
function renderSelectionSlots() {
    const slots = document.getElementById('selection-slots');
    slots.innerHTML = '';
    
    for (let i = 0; i < 5; i++) {
        const slot = document.createElement('div');
        slot.className = 'slot';
        slot.dataset.slot = i;
        
        if (selectedDisabledStyles[i]) {
            slot.classList.add('filled');
            const playstyle = PLAYSTYLES_DATA.find(p => p.id === selectedDisabledStyles[i]);
            slot.innerHTML = `
                <span class="slot-number">${i + 1}</span>
                <span class="slot-text">${playstyle.name}</span>
            `;
        } else {
            slot.classList.add('empty');
            slot.innerHTML = `
                <span class="slot-number">${i + 1}</span>
                <span class="slot-text">–ü—É—Å—Ç–æ</span>
            `;
        }
        
        slots.appendChild(slot);
    }
}

// ========== –ü–û–ò–°–ö–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ==========
function renderSearchResults() {
    renderSelectionSlots(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã
    
    const resultSection = document.getElementById('results-section');
    const buildList = document.getElementById('heroes-list');
    buildList.innerHTML = '';
    
    if (selectedDisabledStyles.length === 0) {
        resultSection.style.display = "none";
        return;
    }
    
    const results = searchBuilds(selectedDisabledStyles);
    resultSection.style.display = "block";
    
    if (results.length === 0) {
        buildList.innerHTML = `<div class="hero-card"><div class="hero-name">–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–∏–ª–¥–æ–≤</div></div>`;
        return;
    }
    
    results.forEach((build, idx) => {
        buildList.appendChild(buildCardView(build, idx));
    });
}

// ======= –û–¢–†–ò–°–û–í–ö–ê –ö–ê–†–¢–û–ß–ö–ò –ë–ò–õ–î–ê =======
function buildCardView(build, buildIdx) {
    // –ù–∞–π–¥–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–∏–ª–¥–∞ –≤ –º–∞—Å—Å–∏–≤–µ builds
    const realIndex = builds.findIndex(b => 
        b.hero === build.hero && 
        JSON.stringify(b.mustHave) === JSON.stringify(build.mustHave) &&
        JSON.stringify(b.mustNotHave) === JSON.stringify(build.mustNotHave)
    );
    
    const el = document.createElement('div');
    el.className = 'hero-card';
    el.innerHTML = `
        <div class="hero-name">${build.hero}</div>
        <div style="margin:6px 0;color:#d4af37;font-weight:bold;">–¢–∞–ª–∞–Ω—Ç—ã: ${build.talents || ''}</div>
        <div class="style-row"><span style="color:#49d;">+ </span>${build.mustHave.map(st => styleName(st)).join(', ') || '-'}</div>
        <div class="style-row"><span style="color:#f55;">‚Äì </span>${build.mustNotHave.map(st => styleName(st)).join(', ') || '-'}</div>
        <div style="margin-top:8px; color:#eee; font-size:0.9rem;white-space:pre-wrap;">${build.comment || ''}</div>
        <div class="build-actions" style="margin-top: 10px;">
            <button class="edit-btn" onclick="editBuild(${realIndex})">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
            <button class="delete-btn" onclick="deleteBuild(${realIndex})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
        </div>
    `;
    return el;
}

function styleName(id) {
    let found = PLAYSTYLES_DATA.find(st => st.id === id);
    return found ? found.name : id;
}

// ========== –û–¢–†–ò–°–û–í–ö–ê –°–ü–ò–°–ö–ê –ë–ò–õ–î–û–í ==========
function renderBuildsList() {
    const buildsList = document.getElementById('all-builds-list');
    const totalSpan = document.getElementById('total-heroes');
    totalSpan.textContent = builds.length;
    buildsList.innerHTML = '';
    
    builds.forEach((build, i) => {
        const el = document.createElement('div');
        el.className = 'hero-item build-item';
        el.innerHTML = `
            <div class="build-main-info">
                <div class="build-hero-name">${build.hero || '(–±–µ–∑ –∏–º–µ–Ω–∏)'}</div>
                <div class="build-talents">${build.talents ? `–¢–∞–ª–∞–Ω—Ç—ã: ${build.talents}` : ''}</div>
            </div>
            <div class="build-styles">
                <div class="styles-must-have">+ ${build.mustHave.map(styleName).join(', ') || '–Ω–µ—Ç'}</div>
                <div class="styles-must-not">‚Äì ${build.mustNotHave.map(styleName).join(', ') || '–Ω–µ—Ç'}</div>
            </div>
            <div class="build-actions">
                <button class="edit-btn" onclick="editBuild(${i})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                <button class="delete-btn" onclick="deleteBuild(${i})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            </div>
        `;
        buildsList.appendChild(el);
    });
}

// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==========
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π
    document.getElementById('reset-btn').addEventListener('click', function() {
        selectedDisabledStyles = [];
        renderDisabledStylesPicker();
        renderSearchResults();
    });
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–¥–∞
    document.getElementById('add-build-btn').onclick = showAddBuildModal;
    
    // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    document.getElementById('export-btn').onclick = exportBuilds;
    
    // –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    document.getElementById('import-btn').onclick = importBuilds;
    
    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('reset-db').onclick = function() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±–∏–ª–¥—ã?')) {
            builds = [];
            persist();
            renderBuildsList();
            renderSearchResults();
        }
    }
}

// ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ë–ò–õ–î–û–í ==========
function showAddBuildModal() {
    editingBuildIndex = null;
    showBuildFormModal({
        hero: '',
        mustHave: [],
        mustNotHave: [],
        talents: '',
        comment: ''
    }, '–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–¥–∞');
}

window.editBuild = function(idx) {
    if (!builds[idx]) {
        alert('–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    editingBuildIndex = idx;
    showBuildFormModal(builds[idx], `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–¥–∞: ${builds[idx].hero}`);
}

window.deleteBuild = function(idx) {
    if (!builds[idx]) {
        alert('–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –±–∏–ª–¥ –¥–ª—è –≥–µ—Ä–æ—è "${builds[idx].hero}"?`)) return;
    builds.splice(idx, 1);
    persist();
    renderBuildsList();
    renderSearchResults();
    alert('–ë–∏–ª–¥ —É–¥–∞–ª–µ–Ω!');
}

// ========== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ==========
function showBuildFormModal(build, title = "") {
    let overlay = document.createElement('div');
    overlay.className = 'modal-overlay';
    overlay.id = 'build-modal-x';
    overlay.innerHTML = `
    <div class="modal-content modal-wide">
        <div class="modal-header">
            <h3>${title}</h3>
            <button class="close-btn" id="close-build-modal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="row-inputs">
                <div class="form-field">
                    <label for="build-hero" style="font-size:1.04rem;font-weight:bold;">–ì–µ—Ä–æ–π:</label>
                    <select id="build-hero" style="width:210px;font-size:1.17rem;font-weight:bold;padding:7px 13px;">
                        <option value=""> -- –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è -- </option>
                        ${HEROES_LIST.map(h => `<option value="${h}"${(h === build.hero ? ' selected' : '')}>${h}</option>`).join('')}
                    </select>
                </div>
                <div class="form-field">
                    <label for="build-talents" style="font-size:1.0rem;">–¢–∞–ª–∞–Ω—Ç—ã:</label>
                    <input id="build-talents" style="width:110px;font-size:1.08rem;padding:7px;border-radius:7px;border:1.3px solid #aaa" value="${build.talents || ''}" placeholder="10 20 30">
                </div>
            </div>
            <div class="form-field">
                <label style="font-size:1rem;font-weight:bold;">–°—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ <b>–î–û–õ–ñ–ù–´</b> –±—ã—Ç—å:</label>
                <div class="edit-styles-grid" id="musthave-grid"></div>
            </div>
            <div class="form-field">
                <label style="font-size:1rem;font-weight:bold;">–°—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö <b>–ù–ï –¥–æ–ª–∂–Ω–æ</b> –±—ã—Ç—å:</label>
                <div class="edit-styles-grid" id="mustnothave-grid"></div>
            </div>
            <div class="form-field">
                <label for="build-comment" style="font-size:1rem;">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                <textarea id="build-comment" rows="2" style="width:100%;font-size:1.08rem;padding:7px;border-radius:7px;border:1.3px solid #aaa" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">${build.comment || ''}</textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button class="save-btn" id="save-build" style="font-size:1.1rem;padding:12px 35px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button class="cancel-btn" id="cancel-build" style="font-size:1.1rem;padding:12px 35px;">–û—Ç–º–µ–Ω–∞</button>
        </div>
    </div>
    `;
    document.body.appendChild(overlay);

    let mustHave = [...(build.mustHave || [])];
    let mustNotHave = [...(build.mustNotHave || [])];

    const gridH = overlay.querySelector('#musthave-grid');
    const gridN = overlay.querySelector('#mustnothave-grid');

    function renderCheckboxGrids() {
        // Must Have
        gridH.innerHTML = '';
        PLAYSTYLES_DATA.forEach(ps => {
            if (mustNotHave.includes(ps.id)) return;
            const btn = document.createElement('button');
            btn.className = 'edit-style-btn style-big';
            btn.textContent = ps.name;
            if (mustHave.includes(ps.id)) btn.classList.add('selected');
            if (mustHave.length >= 5 && !mustHave.includes(ps.id)) btn.classList.add('disabled');
            btn.onclick = (e) => {
                e.preventDefault();
                if (mustHave.includes(ps.id)) {
                    mustHave = mustHave.filter(id => id !== ps.id);
                } else if (mustHave.length < 5) {
                    mustHave.push(ps.id);
                }
                renderCheckboxGrids();
            };
            gridH.appendChild(btn);
        });

        // Must Not Have
        gridN.innerHTML = '';
        PLAYSTYLES_DATA.forEach(ps => {
            if (mustHave.includes(ps.id)) return;
            const btn = document.createElement('button');
            btn.className = 'edit-style-btn style-big';
            btn.textContent = ps.name;
            if (mustNotHave.includes(ps.id)) btn.classList.add('selected');
            if (mustNotHave.length >= 5 && !mustNotHave.includes(ps.id)) btn.classList.add('disabled');
            btn.onclick = (e) => {
                e.preventDefault();
                if (mustNotHave.includes(ps.id)) {
                    mustNotHave = mustNotHave.filter(id => id !== ps.id);
                } else if (mustNotHave.length < 5) {
                    mustNotHave.push(ps.id);
                }
                renderCheckboxGrids();
            };
            gridN.appendChild(btn);
        });
    }

    renderCheckboxGrids();

    overlay.querySelector('#close-build-modal').onclick = close;
    overlay.querySelector('#cancel-build').onclick = close;
    overlay.querySelector('#save-build').onclick = function () {
        const hero = overlay.querySelector('#build-hero').value;
        const talents = overlay.querySelector('#build-talents').value.trim();
        const comment = overlay.querySelector('#build-comment').value.trim();
        if (!hero) return alert('–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è');
        if (mustHave.length > 5 || mustNotHave.length > 5) return alert('–ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç–∏–ª–µ–π –≤ –∫–∞–∂–¥–æ–º –ø–æ–ª–µ!');
        if (mustHave.some(s => mustNotHave.includes(s)))
            return alert('–í "–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å" –∏ "–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å" —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å—Ç–∏–ª–∏!');
        builds[editingBuildIndex !== null ? editingBuildIndex : builds.length] = {
            hero, mustHave: [...mustHave], mustNotHave: [...mustNotHave], talents, comment
        };
        persist();
        renderBuildsList();
        renderSearchResults();
        close();
    };

    function close() {
        document.body.removeChild(overlay);
    }
}

// ========== –ò–ú–ü–û–†–¢/–≠–ö–°–ü–û–†–¢ ==========
function exportBuilds() {
    const data = {
        exported_at: new Date().toLocaleString('ru-RU'),
        builds_count: builds.length,
        builds
    };
    const blob = new Blob([JSON.stringify(data, null, 2)], {type: 'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `glad_builds_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => URL.revokeObjectURL(url), 2000);
    document.body.removeChild(a);
}

function importBuilds() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = function(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const data = JSON.parse(e.target.result);
                let importedBuilds = [];
                
                if (Array.isArray(data)) {
                    importedBuilds = data;
                } else if (data.builds && Array.isArray(data.builds)) {
                    importedBuilds = data.builds;
                } else {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                }
                
                const validBuilds = importedBuilds.filter(build => 
                    build.hero && 
                    Array.isArray(build.mustHave) && 
                    Array.isArray(build.mustNotHave)
                );
                
                if (validBuilds.length === 0) {
                    alert('–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–∏–ª–¥–æ–≤!');
                    return;
                }
                
                const replace = confirm(
                    `–ù–∞–π–¥–µ–Ω–æ ${validBuilds.length} –±–∏–ª–¥–æ–≤.\n\n` +
                    `OK - –ó–ê–ú–ï–ù–ò–¢–¨ –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –±–∏–ª–¥—ã\n` +
                    `–û—Ç–º–µ–Ω–∞ - –î–û–ë–ê–í–ò–¢–¨ –∫ —Ç–µ–∫—É—â–∏–º`
                );
                
                if (replace) {
                    builds = validBuilds;
                } else {
                    builds = builds.concat(validBuilds);
                }
                
                persist();
                renderBuildsList();
                renderSearchResults();
                alert(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${validBuilds.length} –±–∏–ª–¥–æ–≤!`);
                
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
            }
        };
        reader.readAsText(file);
    };
    input.click();
}

// ========== –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨ ==========
function persist() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(builds));
}

// ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ù–î–ï–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ==========
// –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª–µ–π
function updateUI() {
    renderDisabledStylesPicker();
    renderSearchResults();
}

