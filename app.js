// ========== –ì–ï–†–û–ò –î–õ–Ø –í–´–ü–ê–î–ê–Æ–©–ï–ì–û –°–ü–ò–°–ö–ê ==========
const HEROES_LIST = [
    "DROW RANGER", "NYX", "TIMBERSAW", "UNDDYING", "PA", "PUGNA", "MIRANA", "LC", "PANGO", "LIFESTEALER", "HUSKAR", "MAGNUS", "ZEUS", "JUGGER", "CK", "NECR", "TINY", "YAMASHITA",
    "VOID", "AA", "DARK WILLOW", "MUERTA", "HOODWINK", "VIPER", "TINKER", "DOOM", "GRIMSTROKE", "AXE", "QOP", "MARCI", "WINDRANDGER", "TREANT", "LICH", "LYCAN", "OMNIK", "URSA",
    "SF", "SKY", "ABADDON", "RAZOR", "SPECTRE", "SNIPER", "EMBER SPIRIT", "VOID SPIRIT", "RIKI", "LUNA", "OGRE MAGI", "CM", "PUDGE", "ASH", "LINA", "KUNKKA", "DAZZLE", "AWAKENED",
    "WASTELAND GUARD", "TA", "RINGMASTER", "MK", "ES", "LION", "GUITARIST", "KEZ", "WITCH DOCTOR", "FLAMEBORN", "TROLL", "ALCHEMIST", "CLINKZ", "LESHRAC", "PL", "BRIST", "SILENCER",
    "BROOD MOTHER",
];
// ========== –î–ê–ù–ù–´–ï –°–¢–ò–õ–ï–ô ==========
const PLAYSTYLES_DATA = [
    {id: "guards", name: "–°—Ç—Ä–∞–∂–∏", description: "–ì–µ–π—Å–∫–∏–µ —à–∞—Ä—ã"},
    {id: "crits", name: "–ö—Ä–∏—Ç—ã", description: "–°—Ä–∞–Ω—ã–µ –ø—Ä–æ–∫–∏"},
    {id: "dodge", name: "–£–≤–æ—Ä–æ—Ç—ã", description: "–í—Å–µ–≥–¥–∞ –∫–∞—á–∞–π –º–µ–Ω—è"},
    {id: "poison", name: "–Ø–¥—ã", description: "–í –Ω–∞—á–∞–ª–µ —Ç–∞—â—É, –≤ –∫–æ–Ω—Ü–µ –ì–•"},
    {id: "shields", name: "–©–∏—Ç—ã", description: "–ë–µ–∑ –ø—Ä–æ–∫–æ–≤ –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω"},
    {id: "healing", name: "–õ–µ—á–µ–Ω–∏–µ", description: "–°–∏–ª—å–Ω–µ–µ –∫–∞–ª–µ—á—É —á–µ–º –ª–µ—á—É"},
    {id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", description: "–Ø –∏–º–±–∞"},
    {id: "vulnerability", name: "–£—è–∑–≤–∏–º–æ—Å—Ç—å", description: "–§–∞–π—Ç –¥–≤–µ —Å–µ–∫—É–Ω–¥—ã"},
    {id: "rage", name: "–Ø—Ä–æ—Å—Ç—å", description: "–ù–µ —è—Å–Ω–æ –∑–∞—á–µ–º —è –Ω—É–∂–µ–Ω"},
    {id: "freeze", name: "–ó–∞–º–æ—Ä–æ–∑–∫–∞", description: "–£–¥–∞—á–∏ –∫–∞—Å—Ç–∞–Ω—É—Ç—å —É–ª—å—Ç—É"},
    {id: "chaos", name: "–•–∞–æ—Å", description: "–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è —Ç–µ–º–∞ –≤–æ–æ–±—â–µ"},
    {id: "ultimate", name: "–£–ª—å—Ç–∞", description: "–û–ø—è—Ç—å –≥–∏—Ç–∞—Ä–∏—Å—Ç –≤ –±–∞–Ω–µ"},
    {id: "attack", name: "–ê—Ç–∞–∫–∞", description: "–ú–æ—è –±–∏—Ç—å"}
];

// ========== –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï ==========
const STORAGE_KEY = "buildsDatabase";
let builds = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [
    {
        "hero": "–º–∏—Ä–∞–Ω–∞",
        "mustHave": ["guards", "poison"],
        "mustNotHave": ["crits", "healing", "dodge"],
        "talents": "2 1 2",
        "comment": "–ù–µ—Ç –ª–µ–≥–∏ –Ω–∞ –ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–∂–µ–π",
        "tier": 2,
        "img": ""
    }
];

// ========== –°–û–°–¢–û–Ø–ù–ò–ï ==========
let selectedDisabledStyles = [];
let editingBuildIndex = null;
let heroSearchFilter = ''; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤

// ========== UI –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========
document.addEventListener("DOMContentLoaded", () => {
    renderDisabledStylesPicker();
    renderBuildsList();
    setupEventListeners();
});

// ========== –ü–û–ò–°–ö –ë–ò–õ–î–û–í ==========
function searchBuilds(disabledStyles) {
    const enabledStyles = PLAYSTYLES_DATA.map(x => x.id).filter(id => !disabledStyles.includes(id));
    return builds.filter(build => {
        if (!build.mustHave.every(s => enabledStyles.includes(s))) return false;
        if (build.mustNotHave.some(s => enabledStyles.includes(s))) return false;
        return true;
    });
}
// ========== –û–¢–†–ò–°–û–í–ö–ê –í–´–ë–û–†–ê –°–¢–ò–õ–ï–ô –î–õ–Ø –ü–û–ò–°–ö–ê ==========
function renderDisabledStylesPicker() {
    const grid = document.getElementById('playstyles-grid');
    grid.innerHTML = '';
    PLAYSTYLES_DATA.forEach(ps => {
        const btn = document.createElement('button');
        btn.className = 'playstyle-btn';
        btn.dataset.id = ps.id;
        btn.innerHTML = `<div>${ps.name}</div><div style="font-size:0.8em;color:#ccc">${ps.description}</div>`;
        if (selectedDisabledStyles.includes(ps.id)) btn.classList.add('selected');
        if (selectedDisabledStyles.length >= 5 && !selectedDisabledStyles.includes(ps.id))
            btn.classList.add('disabled');
        btn.onclick = () => {
            toggleDisabledStyle(ps.id);
        };
        grid.appendChild(btn);
    });
    document.getElementById('selection-count').textContent = selectedDisabledStyles.length;
}
function toggleDisabledStyle(id) {
    const i = selectedDisabledStyles.indexOf(id);
    if (i === -1 && selectedDisabledStyles.length < 5) selectedDisabledStyles.push(id);
    else if (i !== -1) selectedDisabledStyles.splice(i, 1);
    renderDisabledStylesPicker();
    renderSearchResults();
}
// ========== –°–õ–û–¢–´ –í–´–ë–û–†–ê ==========
function renderSelectionSlots() {
    const slots = document.getElementById('selection-slots');
    slots.innerHTML = '';
    for (let i = 0; i < 5; i++) {
        const slot = document.createElement('div');
        slot.className = 'slot';
        slot.dataset.slot = i;
        if (selectedDisabledStyles[i]) {
            slot.classList.add('filled');
            const playstyle = PLAYSTYLES_DATA.find(p => p.id === selectedDisabledStyles[i]);
            slot.innerHTML = `<span class="slot-number">${i + 1}</span>
                <span class="slot-text">${playstyle.name}</span>`;
        } else {
            slot.classList.add('empty');
            slot.innerHTML = `<span class="slot-number">${i + 1}</span>
                <span class="slot-text">–ü—É—Å—Ç–æ</span>`;
        }
        slots.appendChild(slot);
    }
}

// ========== –ü–û–ò–°–ö–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ==========
function renderSearchResults() {
    renderSelectionSlots();
    const resultSection = document.getElementById('results-section');
    const buildList = document.getElementById('heroes-list');
    buildList.innerHTML = '';
    if (selectedDisabledStyles.length === 0) {
        resultSection.style.display = "none";
        return;
    }
    const results = searchBuilds(selectedDisabledStyles);
    resultSection.style.display = "block";
    if (results.length === 0) {
        buildList.innerHTML = `<div class="hero-card"><div class="hero-name">–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–∏–ª–¥–æ–≤</div></div>`;
        return;
    }
    
    // ========== –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –¢–ò–†–£ (1-4) ==========
    results.sort((a, b) => {
        const tierA = a.tier || 4;
        const tierB = b.tier || 4;
        return tierA - tierB; // 1, 2, 3, 4
    });
    
    results.forEach((build, idx) => {
        buildList.appendChild(buildCardView(build, idx));
    });
}

// ======= –û–¢–†–ò–°–û–í–ö–ê –ö–ê–†–¢–û–ß–ö–ò –ë–ò–õ–î–ê (–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø) =======
function buildCardView(build, buildIdx) {
    const realIndex = builds.findIndex(b =>
        b.hero === build.hero &&
        JSON.stringify(b.mustHave) === JSON.stringify(build.mustHave) &&
        JSON.stringify(b.mustNotHave) === JSON.stringify(build.mustNotHave)
    );
    const el = document.createElement('div');
    el.className = 'hero-card hero-card-wide';

    let imgHtml = '';
    if (build.img) {
        imgHtml = `<div class="build-img"><img src="${build.img}" alt="${build.hero}" loading="lazy"></div>`;
    } else {
        imgHtml = `<div class="build-img build-img-empty"><span>–ù–µ—Ç —Ñ–æ—Ç–æ</span></div>`;
    }

    el.innerHTML = `
        ${imgHtml}
        <div class="build-content">
            <div class="hero-name">
                ${build.hero}
                <span class="tier-badge tier-badge-${build.tier||4}" title="–¢–∏—Ä –±–∏–ª–¥–∞">${build.tier||4}</span>
            </div>
            <div style="margin:6px 0;color:#d4af37;font-weight:bold;">–¢–∞–ª–∞–Ω—Ç—ã: ${build.talents || ''}</div>
            <div class="style-row"><span style="color:#49d;">+ </span>${build.mustHave.map(st => styleName(st)).join(', ') || '-'}</div>
            <div class="style-row"><span style="color:#f55;">‚Äì </span>${build.mustNotHave.map(st => styleName(st)).join(', ') || '-'}</div>
            <div class="build-comment">${build.comment || ''}</div>
            <div class="build-actions">
                <button class="edit-btn" onclick="editBuild(${realIndex})">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button class="delete-btn" onclick="deleteBuild(${realIndex})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `;
    return el;
}
function styleName(id) {
    let found = PLAYSTYLES_DATA.find(st => st.id === id);
    return found ? found.name : id;
}

// ========== –û–¢–†–ò–°–û–í–ö–ê –°–ü–ò–°–ö–ê –ë–ò–õ–î–û–í ==========
function renderBuildsList() {
    const buildsList = document.getElementById('all-builds-list');
    const totalSpan = document.getElementById('total-heroes');
    buildsList.innerHTML = '';
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–µ—Ä–æ—é
    let filteredBuilds = builds;
    if (heroSearchFilter.trim()) {
        filteredBuilds = builds.filter(build => 
            build.hero && build.hero.toLowerCase().includes(heroSearchFilter.toLowerCase())
        );
    }
    
    totalSpan.textContent = `${filteredBuilds.length}${heroSearchFilter.trim() ? ` –∏–∑ ${builds.length}` : ''}`;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const indexedBuilds = filteredBuilds.map((build) => ({
        build: build,
        originalIndex: builds.indexOf(build) // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    }));
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏—Ä—É
    indexedBuilds.sort((a, b) => {
        const tierA = a.build.tier || 4;
        const tierB = b.build.tier || 4;
        return tierA - tierB;
    });
    
    if (indexedBuilds.length === 0) {
        buildsList.innerHTML = `<div style="text-align:center;color:#888;padding:20px;">
            ${heroSearchFilter.trim() ? '–ù–µ—Ç –±–∏–ª–¥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–µ—Ä–æ—è' : '–ù–µ—Ç –±–∏–ª–¥–æ–≤ –≤ –±–∞–∑–µ'}
        </div>`;
        return;
    }
    
    indexedBuilds.forEach(({build, originalIndex}) => {
        const el = document.createElement('div');
        el.className = 'hero-item build-item';
        let imgHtml = build.img ? `<div class="build-img-mini"><img src="${build.img}" alt="" loading="lazy"></div>` : '';
        el.innerHTML = `
            <div class="build-main-info">
                <div class="build-hero-name">
                  ${imgHtml}${build.hero || '(–±–µ–∑ –∏–º–µ–Ω–∏)'}
                  <span class="tier-badge tier-badge-${build.tier||4}" title="–¢–∏—Ä">${build.tier||4}</span>
                </div>
                <div class="build-talents">${build.talents ? `–¢–∞–ª–∞–Ω—Ç—ã: ${build.talents}` : ''}</div>
            </div>
            <div class="build-styles">
                <div class="styles-must-have">+ ${build.mustHave.map(styleName).join(', ') || '–Ω–µ—Ç'}</div>
                <div class="styles-must-not">‚Äì ${build.mustNotHave.map(styleName).join(', ') || '–Ω–µ—Ç'}</div>
            </div>
            <div class="build-comment">${build.comment || ''}</div>
            <div class="build-actions">
                <button class="edit-btn" onclick="editBuild(${originalIndex})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                <button class="delete-btn" onclick="deleteBuild(${originalIndex})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            </div>
        `;
        buildsList.appendChild(el);
    });
}

// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==========
function setupEventListeners() {
    document.getElementById('reset-btn').addEventListener('click', function() {
        selectedDisabledStyles = [];
        renderDisabledStylesPicker();
        renderSearchResults();
    });
    document.getElementById('add-build-btn').onclick = showAddBuildModal;
    document.getElementById('export-btn').onclick = exportBuilds;
    document.getElementById('import-btn').onclick = importBuilds;
    document.getElementById('reset-db').onclick = function() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±–∏–ª–¥—ã?')) {
            builds = [];
            persist();
            renderBuildsList();
            renderSearchResults();
        }
    }
    
    // ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ò–°–ö–ê –ì–ï–†–û–ï–í ==========
    document.getElementById('hero-search').addEventListener('input', function() {
        heroSearchFilter = this.value;
        renderBuildsList();
    });
    
    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
    document.getElementById('clear-search').addEventListener('click', function() {
        heroSearchFilter = '';
        document.getElementById('hero-search').value = '';
        renderBuildsList();
    });
}

function showAddBuildModal() {
    editingBuildIndex = null;
    showBuildFormModal({
        hero: '',
        mustHave: [],
        mustNotHave: [],
        talents: '',
        comment: '',
        tier: 4,
        img: ''
    }, '–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–¥–∞');
}
window.editBuild = function(idx) {
    if (!builds[idx]) {
        alert('–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    editingBuildIndex = idx;
    showBuildFormModal(builds[idx], `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–¥–∞: ${builds[idx].hero}`);
}
window.deleteBuild = function(idx) {
    if (!builds[idx]) {
        alert('–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –±–∏–ª–¥ –¥–ª—è –≥–µ—Ä–æ—è "${builds[idx].hero}"?`)) return;
    builds.splice(idx, 1);
    persist();
    renderBuildsList();
    renderSearchResults();
}
// ========== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ==========
function showBuildFormModal(build, title = "") {
    let overlay = document.createElement('div');
    overlay.className = 'modal-overlay';
    overlay.id = 'build-modal-x';
    overlay.innerHTML = `
    <div class="modal-content modal-wide">
        <div class="modal-header">
            <h3>${title}</h3>
            <button class="close-btn" id="close-build-modal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="row-inputs">
                <div class="form-field">
                    <label for="build-hero" style="font-size:1.04rem;font-weight:bold;">–ì–µ—Ä–æ–π:</label>
                    <select id="build-hero" style="width:210px;font-size:1.17rem;font-weight:bold;padding:7px 13px;">
                        <option value=""> -- –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è -- </option>
                        ${HEROES_LIST.map(h => `<option value="${h}"${(h === build.hero ? ' selected' : '')}>${h}</option>`).join('')}
                    </select>
                </div>
                <div class="form-field">
                    <label for="build-tier" style="font-size:1.05rem;">–¢–∏—Ä –±–∏–ª–¥–∞:</label>
                    <select id="build-tier" style="margin-left:10px;font-size:1.05rem;font-weight:bold;border-radius:7px;border:1px solid #aaa;padding:6px;">
                        <option value="1"${build.tier==1?' selected':''}>1 (S-Tier)</option>
                        <option value="2"${build.tier==2?' selected':''}>2 (A-Tier)</option>
                        <option value="3"${build.tier==3?' selected':''}>3 (B-Tier)</option>
                        <option value="4"${!build.tier || build.tier==4?' selected':''}>4 (fun/meme)</option>
                    </select>
                </div>
                <div class="form-field">
                    <label for="build-talents" style="font-size:1.0rem;">–¢–∞–ª–∞–Ω—Ç—ã:</label>
                    <input id="build-talents" style="width:110px;font-size:1.08rem;padding:7px;border-radius:7px;border:1.3px solid #aaa" value="${build.talents || ''}" placeholder="10 20 30">
                </div>
            </div>
            <div class="form-field">
                <label for="build-img" style="font-size:1.0rem;font-weight:bold;">–ö–∞—Ä—Ç–∏–Ω–∫–∞ (URL –∏–ª–∏ —Ñ–∞–π–ª):</label>
                <div class="img-input-container">
                    <input id="build-img" type="url" style="width:250px;font-size:1.0rem;padding:7px;border-radius:7px;border:1.3px solid #aaa;margin-right:10px;" placeholder="https://example.com/image.jpg" value="${build.img||''}">
                    <input id="img-file" type="file" accept="image/*" style="font-size:0.9rem;">
                </div>
                <div id="img-preview" style="margin-top:10px;">
                    ${build.img ? `<img src="${build.img}" style="max-width:120px;max-height:120px;border-radius:10px;border:2px solid #666;">` : ''}
                </div>
            </div>
            <div class="form-field">
                <label style="font-size:1rem;font-weight:bold;">–°—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ <b>–î–û–õ–ñ–ù–´</b> –±—ã—Ç—å:</label>
                <div class="edit-styles-grid" id="musthave-grid"></div>
            </div>
            <div class="form-field">
                <label style="font-size:1rem;font-weight:bold;">–°—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö <b>–ù–ï –¥–æ–ª–∂–Ω–æ</b> –±—ã—Ç—å:</label>
                <div class="edit-styles-grid" id="mustnothave-grid"></div>
            </div>
            <div class="form-field">
                <label for="build-comment" style="font-size:1rem;">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                <textarea id="build-comment" rows="2" style="width:100%;font-size:1.08rem;padding:7px;border-radius:7px;border:1.3px solid #aaa" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">${build.comment || ''}</textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button class="save-btn" id="save-build" style="font-size:1.1rem;padding:12px 35px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button class="cancel-btn" id="cancel-build" style="font-size:1.1rem;padding:12px 35px;">–û—Ç–º–µ–Ω–∞</button>
        </div>
    </div>
    `;
    document.body.appendChild(overlay);
    let mustHave = [...(build.mustHave || [])];
    let mustNotHave = [...(build.mustNotHave || [])];
    let imgVal = build.img || '';

    const imgInput = overlay.querySelector('#build-img');
    const imgFile = overlay.querySelector('#img-file');
    const imgPreview = overlay.querySelector('#img-preview');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
    imgInput.addEventListener('input', function() {
        imgVal = imgInput.value;
        updatePreview();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    imgFile.addEventListener('change', function() {
        if (imgFile.files && imgFile.files[0]) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imgVal = e.target.result;
                imgInput.value = imgVal;
                updatePreview();
            };
            reader.readAsDataURL(imgFile.files[0]);
        }
    });

    function updatePreview() {
        if (imgVal) {
            imgPreview.innerHTML = `<img src="${imgVal}" style="max-width:120px;max-height:120px;border-radius:10px;border:2px solid #666;">`;
        } else {
            imgPreview.innerHTML = '';
        }
    }

    const gridH = overlay.querySelector('#musthave-grid');
    const gridN = overlay.querySelector('#mustnothave-grid');
    function renderCheckboxGrids() {
        // Must Have
        gridH.innerHTML = '';
        PLAYSTYLES_DATA.forEach(ps => {
            if (mustNotHave.includes(ps.id)) return;
            const btn = document.createElement('button');
            btn.className = 'edit-style-btn style-big';
            btn.textContent = ps.name;
            if (mustHave.includes(ps.id)) btn.classList.add('selected');
            if (mustHave.length >= 5 && !mustHave.includes(ps.id)) btn.classList.add('disabled');
            btn.onclick = (e) => {
                e.preventDefault();
                if (mustHave.includes(ps.id)) {
                    mustHave = mustHave.filter(id => id !== ps.id);
                } else if (mustHave.length < 5) {
                    mustHave.push(ps.id);
                }
                renderCheckboxGrids();
            };
            gridH.appendChild(btn);
        });
        // Must Not Have
        gridN.innerHTML = '';
        PLAYSTYLES_DATA.forEach(ps => {
            if (mustHave.includes(ps.id)) return;
            const btn = document.createElement('button');
            btn.className = 'edit-style-btn style-big';
            btn.textContent = ps.name;
            if (mustNotHave.includes(ps.id)) btn.classList.add('selected');
            if (mustNotHave.length >= 5 && !mustNotHave.includes(ps.id)) btn.classList.add('disabled');
            btn.onclick = (e) => {
                e.preventDefault();
                if (mustNotHave.includes(ps.id)) {
                    mustNotHave = mustNotHave.filter(id => id !== ps.id);
                } else if (mustNotHave.length < 5) {
                    mustNotHave.push(ps.id);
                }
                renderCheckboxGrids();
            };
            gridN.appendChild(btn);
        });
    }
    renderCheckboxGrids();
    overlay.querySelector('#close-build-modal').onclick = close;
    overlay.querySelector('#cancel-build').onclick = close;
    overlay.querySelector('#save-build').onclick = function () {
        const hero = overlay.querySelector('#build-hero').value;
        const talents = overlay.querySelector('#build-talents').value.trim();
        const comment = overlay.querySelector('#build-comment').value.trim();
        const tier = parseInt(overlay.querySelector('#build-tier').value);
        if (!hero) return alert('–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è');
        if (mustHave.length > 5 || mustNotHave.length > 5) return alert('–ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç–∏–ª–µ–π –≤ –∫–∞–∂–¥–æ–º –ø–æ–ª–µ!');
        if (mustHave.some(s => mustNotHave.includes(s)))
            return alert('–í "–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å" –∏ "–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å" —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å—Ç–∏–ª–∏!');
        builds[editingBuildIndex !== null ? editingBuildIndex : builds.length] = {
            hero, mustHave: [...mustHave], mustNotHave: [...mustNotHave], talents, comment, tier, img: imgVal
        };
        persist();
        renderBuildsList();
        renderSearchResults();
        close();
    };
    function close() {
        document.body.removeChild(overlay);
    }
}
// ========== –ò–ú–ü–û–†–¢/–≠–ö–°–ü–û–†–¢ ==========
function exportBuilds() {
    const data = {
        exported_at: new Date().toLocaleString('ru-RU'),
        builds_count: builds.length,
        builds
    };
    const blob = new Blob([JSON.stringify(data, null, 2)], {type: 'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `glad_builds_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => URL.revokeObjectURL(url), 2000);
    document.body.removeChild(a);
}
function importBuilds() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = function(event) {
        const file = event.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const data = JSON.parse(e.target.result);
                let importedBuilds = [];
                if (Array.isArray(data)) {
                    importedBuilds = data;
                } else if (data.builds && Array.isArray(data.builds)) {
                    importedBuilds = data.builds;
                } else {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                }
                const validBuilds = importedBuilds.filter(build =>
                    build.hero &&
                    Array.isArray(build.mustHave) &&
                    Array.isArray(build.mustNotHave)
                );
                if (validBuilds.length === 0) {
                    alert('–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–∏–ª–¥–æ–≤!');
                    return;
                }
                const replace = confirm(
                    `–ù–∞–π–¥–µ–Ω–æ ${validBuilds.length} –±–∏–ª–¥–æ–≤.\n\n` +
                    `OK - –ó–ê–ú–ï–ù–ò–¢–¨ –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –±–∏–ª–¥—ã\n` +
                    `–û—Ç–º–µ–Ω–∞ - –î–û–ë–ê–í–ò–¢–¨ –∫ —Ç–µ–∫—É—â–∏–º`
                );
                if (replace) {
                    builds = validBuilds;
                } else {
                    builds = builds.concat(validBuilds);
                }
                persist();
                renderBuildsList();
                renderSearchResults();
                alert(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${validBuilds.length} –±–∏–ª–¥–æ–≤!`);
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
            }
        };
        reader.readAsText(file);
    };
    input.click();
}
// ========== –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨ ==========
function persist() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(builds));
}




